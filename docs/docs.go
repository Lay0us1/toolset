// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/loader/dll-hijack": {
            "post": {
                "description": "generate a white + black evil program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream",
                    "application/json"
                ],
                "tags": [
                    "pretender"
                ],
                "summary": "generate a white + black",
                "parameters": [
                    {
                        "format": "object",
                        "description": "the param to generate pretender",
                        "name": "runner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DllHijack"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pretender",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/loader/dll-hijack/config": {
            "get": {
                "description": "get all valid dll hijack option",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "get dll hijack option",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/plugins.DllHijackOptionItem"
                            }
                        }
                    }
                }
            }
        },
        "/loader/dll-proxyer": {
            "post": {
                "description": "Generate a evil dll proxyer according to shellcode and dll provided by the user\nThis will generate three file, the settings.dat, the evil dll with origin dll name, the origin dll with new name\nYou need place the settings.dat to executable dir, the evil dll and the origin dll place to origin dir",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream",
                    "application/json"
                ],
                "tags": [
                    "proxyer"
                ],
                "summary": "generate a evil dll proxyer",
                "parameters": [
                    {
                        "format": "object",
                        "description": "the param to generate evil dll proxyer",
                        "name": "runner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DllProxyer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "evil dll proxyer",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/loader/shellcode-runner": {
            "post": {
                "description": "Generate Runner according to shellcode provided by the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream",
                    "application/json"
                ],
                "tags": [
                    "loader"
                ],
                "summary": "generate a shellcode runner",
                "parameters": [
                    {
                        "format": "object",
                        "description": "the param to generate shellcode runner",
                        "name": "runner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ShellcodeRunner"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "shellcode runner",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httputil.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "model.DllHijack": {
            "type": "object",
            "required": [
                "shellcode",
                "type"
            ],
            "properties": {
                "shellcode": {
                    "description": "Shellcode This is a base64 encoded shellcode",
                    "type": "string",
                    "example": "MTIzemN4"
                },
                "type": {
                    "description": "Type This is dll hijack type",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "model.DllProxyer": {
            "type": "object",
            "required": [
                "dll_data",
                "dll_name",
                "shellcode"
            ],
            "properties": {
                "dll_data": {
                    "description": "DllData the data from base64 encoded dll",
                    "type": "string",
                    "example": "MTIzemN4"
                },
                "dll_name": {
                    "description": "the filename of origin dll",
                    "type": "string",
                    "example": "add.dll"
                },
                "shellcode": {
                    "description": "Shellcode This is a base64 encoded shellcode",
                    "type": "string",
                    "example": "MTIzemN4"
                },
                "x64": {
                    "description": "X64 Whether the shellcode is x64",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "model.ShellcodeRunner": {
            "type": "object",
            "required": [
                "shellcode"
            ],
            "properties": {
                "regen": {
                    "description": "ReGen Whether to regenerate the loader, if true, it will remove cache, this may be beneficial for bypass AV",
                    "type": "boolean",
                    "example": true
                },
                "shellcode": {
                    "description": "Shellcode This is a base64 encoded shellcode",
                    "type": "string",
                    "example": "MTIzemN4"
                },
                "x64": {
                    "description": "X64 Whether the shellcode is x64",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "plugins.DllHijackOptionItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "ToolSet API",
	Description:      "This a toolset server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
